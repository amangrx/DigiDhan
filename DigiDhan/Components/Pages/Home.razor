@page "/home"

<h1>Digi Dhan</h1>
<p> Total Transaction: @totalNumberTransaction</p>
<p> Current Balance: @currentBalance</p>
<div class="cards-container">
    <div class="card">
        <h2>Income</h2>
        <p>Highest: @highestIncome</p>
        <p>Lowest: @lowestIncome</p>
    </div>
    <div class="card">
        <h2>Expense</h2>
        <p>Highest: @highestExpense</p>
        <p>Lowest: @lowestExpense</p>
    </div>
    <div class="card">
        <h2>Debt</h2>
        <p>Highest: @highestDebt</p>
        <p>Lowest: @lowestDebt</p>
    </div>
</div>
<button class="submit-btn" @onclick="SortByDate" type="submit">Sort Date</button>
<style>
    .cards-container {
        display: flex;
        gap: 20px;
        margin: 20px 0;
    }

    .card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 16px;
        width: 200px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
        font-weight: bold;
    }
</style>

<table>
    <thead>
        <tr>
            <th>Category</th>
            <th>Amount</th>
            <th>Source</th>
            <th>Date</th>
            <th>Tags</th>
            <th>Note</th> <!-- New column for the note -->
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in transaction)
        {
            <tr>
                <td>@transaction.category</td>
                <td>@transaction.amount</td>
                <td>@transaction.source</td>
                <td>@transaction.dateOfTransaction</td>
                <td>@transaction.tags</td>
                <td>@transaction.note</td> <!-- Display the note -->
            </tr>
        }
    </tbody>
</table>



@code {
    private List<Transaction> transaction = new List<Transaction>();
    private DatabaseExtraction databaseExtraction = new DatabaseExtraction();
    private int currentBalance = 0;
    private int highestIncome = 0;
    private int lowestIncome = 0;
    private int highestExpense = 0;
    private int lowestExpense = 0;
    private int highestDebt = 0;
    private int lowestDebt = 0;
    private int totalNumberTransaction;

    public void SortByDate()
    {
        transaction = databaseExtraction.SortByDate();
    }

    protected override async Task OnInitializedAsync()
    {
        transaction = databaseExtraction.GetTransactions(); 
        totalNumberTransaction = databaseExtraction.GetNumberTransaction();
        currentBalance = databaseExtraction.GetUserBalance(1);
        FetchHighestAndLowestValues();
    }

    private void FetchHighestAndLowestValues()
    {
        highestIncome = databaseExtraction.GetHighest("incomes");
        lowestIncome = databaseExtraction.GetLowest("incomes");

        highestExpense = databaseExtraction.GetHighest("expenses");
        lowestExpense = databaseExtraction.GetLowest("expenses");

        highestDebt = databaseExtraction.GetHighest("debt");
        lowestDebt = databaseExtraction.GetLowest("debt");
    }
}
