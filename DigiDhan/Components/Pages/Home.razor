@page "/home"

<h1 class="header">Digi Dhan</h1>
<div class="summary-box">
    <p>Total Transaction: <strong>@totalNumberTransaction</strong></p>
    <p>Current Balance: <strong>@currentBalance</strong></p>
</div>

<!--Cards for income, expense and debt-->
<div class="cards-container">
    <div class="card income-card">
        <h2>Income</h2>
        <p>Highest: @highestIncome</p>
        <p>Lowest: @lowestIncome</p>
        <hr />
        <p>Total: @totalIncome</p>
    </div>
    <div class="card expense-card">
        <h2>Expense</h2>
        <p>Highest: @highestExpense</p>
        <p>Lowest: @lowestExpense</p>
        <hr />
        <p>Total: @totalExpense</p>
    </div>
    <div class="card debt-card">
        <h2>Debt</h2>
        <p>Highest: @highestDebt</p>
        <p>Lowest: @lowestDebt</p>
        <hr />
        <p>Remaining Debt: @totalPendingDebt</p>
        <p>Cleared Debt: @totalClearedDebt</p>
        <p>Total: @totalDebt</p>
    </div>
</div>

<!--Advance search filter-->
<h3 class="header">Advance search with filtering:</h3>
<div class="filter-box">
    <!--Input fields for filtering-->
    <input class="input-field" type="text" @bind="title" placeholder="Search for a source">
    <input class="input-field" type="date" @bind="searchByDateFrom" placeholder="Date">
    <input class="input-field" type="date" @bind="searchByDateTo" placeholder="Date">
    <!--Input field for income-->
    <select class="input-field" @bind="incomeType">
        @foreach (var type in Enum.GetNames(typeof(IncomeType)))
        {
            <option value="@type">@type</option>
        }
    </select>
    <!--Input field for expenses-->
    <select class="input-field" @bind="expType">
        @foreach (var type in Enum.GetNames(typeof(ExpenseType)))
        {
            <option value="@type">@type</option>
        }
    </select>
    <!--Input field for debt-->
    <select class="input-field" @bind="debtType">
        @foreach (var type in Enum.GetNames(typeof(DebtType)))
        {
            <option value="@type">@type</option>
        }
    </select>
    <!--Input field for tags-->
    <select class="input-field" @bind="tags">
        <option value="">-- Select a Tag --</option>
        @foreach (var tag in tagsList)
        {
            <option value="@tag">@tag</option>
        }
    </select>
    <button class="submit-btn" @onclick="SearchByFilter">Search</button>
</div>

<!--Displaying the transactions-->
<h3 class="header">Transaction details:</h3>
<button class="submit-btn" @onclick="SortByDate">Sort all transaction by date</button>
<table class="transaction-table">
    <thead>
        <tr>
            <th>Category</th>
            <th>Amount</th>
            <th>Source</th>
            <th>Date</th>
            <th>Tags</th>
            <th>Note</th>
            <th>Type</th>
        </tr>
    </thead>
    <tbody>
        <!--Using for each loop to display the transactions in the list-->
        @foreach (var transaction in transaction)
        {
            <tr>
                <td>@transaction.category</td>
                <td>@transaction.amount</td>
                <td>@transaction.source</td>
                <td>@transaction.dateOfTransaction</td>
                <td>@transaction.tags</td>
                <td>@transaction.note</td>
                <td>
                    @if (transaction.category == "Income")
                    {
                        @transaction.incomeType
                    }
                    else if (transaction.category == "Expenses")
                    {
                        @transaction.expenseType
                    }
                    else
                    {
                        @if (transaction.debtType == DebtType.Pending)
                        {
                            <span class="pending-debt">@transaction.debtType.ToString()</span>
                        }
                        else
                        {
                            <span class="cleared-debt">@transaction.debtType.ToString()</span>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    //Instance of required classes.
    private List<Transaction> transaction = new List<Transaction>();
    private DatabaseExtraction databaseExtraction = new DatabaseExtraction();
    private TagManagement tagManagement = new TagManagement();
    private List<string> tagsList = new List<string>();

    //initializing the variables to 0 for calculations. 
    private int currentBalance = 0;
    private int highestIncome = 0;
    private int lowestIncome = 0;
    private int highestExpense = 0;
    private int lowestExpense = 0;
    private int highestDebt = 0;
    private int lowestDebt = 0;
    private int totalNumberTransaction;

    private int totalIncome = 0;
    private int totalExpense = 0;
    private int totalDebt = 0;

    private int totalPendingDebt = 0;
    private int totalClearedDebt = 0;

    // variable for dashboard filtering by specific date range.
    private String title;
    private IncomeType incomeType;
    private ExpenseType expType;
    private DebtType debtType;
    private DateOnly searchByDateFrom = DateOnly.FromDateTime(DateTime.Today);
    private DateOnly searchByDateTo = DateOnly.FromDateTime(DateTime.Today);
    private String tags;

    //Calls the function that sorts the transaction according to date. 
    public void SortByDate()
    {
        transaction = databaseExtraction.SortByDate();
    }

    //Calls the function that applies the advance filtering and searching 
    public void SearchByFilter()
    {
        transaction = databaseExtraction.SearchByFilterAndSpecificDateRange(title, incomeType, expType, debtType, searchByDateFrom, searchByDateTo);
    }

    // Initializes the component by fetching transactions, transaction count, user balance and calls the function
    // that calculates highest, lowest, and total values.
    protected override async Task OnInitializedAsync()
    {
        transaction = databaseExtraction.GetTransactions();
        totalNumberTransaction = databaseExtraction.GetNumberTransaction();
        currentBalance = databaseExtraction.GetUserBalance(1);
        FetchHighestAndLowestValues();
        FetchTotal();
    }

    //Calls the method that gets the highest and lowest and assigns the value. 
    private void FetchHighestAndLowestValues()
    {
        highestIncome = databaseExtraction.GetHighest("incomes");
        lowestIncome = databaseExtraction.GetLowest("incomes");

        highestExpense = databaseExtraction.GetHighest("expenses");
        lowestExpense = databaseExtraction.GetLowest("expenses");

        highestDebt = databaseExtraction.GetHighest("debt");
        lowestDebt = databaseExtraction.GetLowest("debt");
    }

    //Calls the function that total amount of income, expense and debt
    private void FetchTotal()
    {
        totalIncome = databaseExtraction.GetTotal("incomes");
        totalExpense = databaseExtraction.GetTotal("expenses");
        totalDebt = databaseExtraction.GetTotal("debt");
        totalPendingDebt = databaseExtraction.GetPendingAndClearedTotal("Pending");
        totalClearedDebt = databaseExtraction.GetPendingAndClearedTotal("Cleared");
    }

    // Fetches and initializes the list of tags during component initialization.
    protected override void OnInitialized()
    {
        tagsList = tagManagement.GetTagList();
    }
}
